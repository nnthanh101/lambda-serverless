AWSTemplateFormatVersion: 2010-09-09

Description: 'This solution allows you to create a AWS CodePipeline for deploying a Serverless application with AWS CodeBuild triggered by a Github repo commit. The setup of this solution is fully automated via a CloudFormation template.'

Parameters:
  Environment:
    AllowedValues:
    - dev
    - stg
    - prod
    Description: 'Environment'
    Type: 'String'
    Default: 'dev'

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name
    Type: String
    Default: lambda-serverless-

  GitHubRepository:
    Type: String
    Default: vbosstech/lambda-serverless/master
    Description:  owner/repository/branch

  GitHubOAuthToken:
    Type: String
    Default: 63d4e73cc22fcd60369c34a3b18b254c2bef46ed
    # Default:  GitHub OAuthToken Here
    # NoEcho: True
    Description:  CodePipeline requires an OAuthToken

Resources:

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodeBuildRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodePipelineRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  # This can be restricted more
  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodeBuildPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:FilterLogEvents
            - logs:DescribeLogStreams
            - logs:DeleteLogGroup
            - codebuild:*
            - 'cloudformation:List*'
            - 'cloudformation:Get*'
            - 'cloudformation:PreviewStackUpdate'
            - 'cloudformation:ValidateTemplate'
            - 'cloudformation:CreateStack'
            - 'cloudformation:CreateUploadBucket'
            - 'cloudformation:DeleteStack'
            - 'cloudformation:Describe*'
            - 'cloudformation:UpdateStack'
            - 'lambda:Get*'
            - 'lambda:List*'
            - 'lambda:CreateFunction'
            - 'lambda:AddPermission'
            - 'lambda:CreateAlias'
            - 'lambda:DeleteFunction'
            - 'lambda:InvokeFunction'
            - 'lambda:PublishVersion'
            - 'lambda:RemovePermission'
            - 'lambda:Update*'
            - 'apigateway:GET'
            - 'apigateway:POST'
            - 'apigateway:PUT'
            - 'apigateway:DELETE'
            - s3:*
            # - 's3:CreateBucket'
            # - 's3:DeleteBucket'
            # - 's3:ListBucket'
            # - 's3:ListBucketVersions'
            # - 's3:GetObject'
            # - 's3:PutObject'
            # - 's3:DeleteObject'
            - 'iam:PassRole'
            - 'kinesis:*'
            - 'iam:GetRole'
            - 'iam:CreateRole'
            - 'iam:PutRolePolicy'
            - 'iam:DeleteRolePolicy'
            - 'iam:DeleteRole'
            - 'cloudwatch:GetMetricStatistics'
            - 'events:Put*'
            - 'events:Remove*'
            - 'events:Delete*'
            - 'dynamodb:*'
          Resource: "*"
      Roles:
        -  !Ref CodeBuildRole

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodePipelinePolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:*
            # - 's3:CreateBucket'
            # - 's3:DeleteBucket'
            # - 's3:ListBucket'
            # - 's3:ListBucketVersions'
            # - 's3:GetObject'
            # - 's3:PutObject'
            # - 's3:DeleteObject'
            - codebuild:*
          Resource:
            - "*"
      Roles:
        -  !Ref CodePipelineRole

  S3:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [!Ref CodePipelineBucketPrefix, !Ref 'Environment', "-", !Ref "AWS::Region"]]

  TestBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: Test-Build
      Description: CodeBuild with CodeDeploy Pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Join [ "", ["buildspec", "-", !Ref 'Environment', ".yml"]]
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:10.1.0
      Artifacts:
        Type: CODEPIPELINE

  BuildDeploy:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: Build-Deploy
      Description: CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            phases:
              build:
                commands:
                  # - bash deploy.sh
                  - echo "executing deploy.sh"
                  - . ./deploy.sh
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: env
            Type: PLAINTEXT
            Value: !Ref Environment
        Image: aws/codebuild/nodejs:10.1.0
      Artifacts:
        Type: CODEPIPELINE

  # CodePipeline with its stages:
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join [ "", ["Pipeline", "-", !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      # RoleArn: !Join [ "", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CodePipelineRole  ] ]
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCode

        # Stage 2:  Build using Serverless Framework
        - Name: TestBuild
          Actions:
            - Name: Test-Build
              RunOrder: 2
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref TestBuild
              OutputArtifacts:
                - Name: TheArtifact

        # Stage 3:  Build and Deploy using Serverless Framework
        - Name: BuildDeploy
          Actions:
            - Name: Build-Deploy
              RunOrder: 3
              InputArtifacts:
                - Name: TheArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref BuildDeploy
              OutputArtifacts:
                - Name: TheArtifact2

Outputs:
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  Github:
    Value: !Ref GitHubRepository
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  CodePipelineRole:
    Value: !Ref CodePipelineRole
  CodePipelinePolicy:
    Value: !Ref CodePipelinePolicy
  S3:
    Value: !Ref S3